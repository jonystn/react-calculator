{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["divide","icon","faDivide","style","color","times","faTimes","minus","faMinus","squareRoot","faSquareRootAlt","Calculator","useState","operand1","setOperand1","operand2","setOperand2","lastOperation","setLastOperation","result","setResult","className","class","type","tabindex","autoFocus","maxLength","value","onChange","e","target","disabled","placeholder","onClick","Math","floor","pow","toFixed","readOnly","onFocus","event","select","src","alt","height","opacity","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81d42734.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Calculator.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faDivide,\n  faTimes,\n  faMinus,\n  faSquareRootAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\n\n// Icons\nconst divide = <FontAwesomeIcon icon={faDivide} style={{ color: \"#1AAFBE\" }} />;\nconst times = <FontAwesomeIcon icon={faTimes} style={{ color: \"#7EB54D\" }} />;\nconst minus = <FontAwesomeIcon icon={faMinus} style={{ color: \"#E34E2A\" }} />;\nconst squareRoot = (\n  <FontAwesomeIcon icon={faSquareRootAlt} style={{ color: \"#F9B31B\" }} />\n);\n\nexport default function Calculator() {\n  // State variables\n  const [operand1, setOperand1] = useState(null);\n  const [operand2, setOperand2] = useState(null);\n  const [lastOperation, setLastOperation] = useState(null);\n  const [result, setResult] = useState(null);\n\n  const handleFocus = (event) => event.target.select();\n\n  // Buttons\n  function divideResult() {\n    if (operand1 && operand2) setResult(Math.floor(operand1 / operand2));\n    if (operand1 && operand2) setLastOperation(operand1 + \" ÷ \" + operand2);\n  }\n\n  function minusResult() {\n    if (operand1 && operand2) setResult(Math.floor(operand1 - operand2));\n    if (operand1 && operand2) setLastOperation(operand1 + \" - \" + operand2);\n  }\n\n  function timesResult() {\n    if (operand1 && operand2) setResult(Math.floor(operand1 * operand2));\n    if (operand1 && operand2) setLastOperation(operand1 + \" × \" + operand2);\n  }\n\n  function sqrtResult() {\n    if (operand1 && operand2)\n      setResult(Math.pow(operand2, 1 / operand1).toFixed(5) + \"...\");\n    if (operand1 && operand2) setLastOperation(operand1 + \" √ \" + operand2);\n  }\n\n  return (\n    <div className=\"Calculator\">\n      <div className=\"Container\">\n        <div className=\"Top\">\n          <h1>react calculator</h1>\n          <div className=\"Hr\"></div>\n        </div>\n        <span>operand 1</span>\n        <div className=\"Led\">\n          <input\n            class=\"Readout\"\n            type=\"number\"\n            tabindex=\"1\"\n            autoFocus=\"autofocus\"\n            maxLength=\"8\"\n            value={operand1}\n            onChange={(e) => setOperand1(e.target.value)}\n          />\n          <input\n            class=\"Placehold\"\n            type=\"readonly\"\n            tabindex=\"-1\"\n            disabled=\"\"\n            placeholder=\"88888888\"\n          ></input>\n        </div>\n        <span>operand 2</span>\n        <div className=\"Led\">\n          <input\n            class=\"Readout\"\n            type=\"number\"\n            tabindex=\"2\"\n            maxLength=\"8\"\n            value={operand2}\n            onChange={(e) => setOperand2(e.target.value)}\n          />\n          <input\n            class=\"Placehold\"\n            type=\"readonly\"\n            tabindex=\"-1\"\n            disabled=\"\"\n            placeholder=\"88888888\"\n          ></input>\n        </div>\n\n        <div className=\"Btns\">\n          <button onClick={minusResult}>\n            <i>{minus}</i>\n          </button>\n          <button onClick={timesResult}>\n            <i>{times}</i>\n          </button>\n          <button onClick={divideResult}>\n            <i>{divide}</i>\n          </button>\n          <button onClick={sqrtResult}>\n            <i>{squareRoot}</i>\n          </button>\n        </div>\n\n        <span>result</span>\n        <div className=\"ResultContainer\">\n          <div className=\"LedLastOperation\">\n            <input\n              className=\"LastOperation\"\n              type=\"text\"\n              tabindex=\"-1\"\n              value={lastOperation}\n              readOnly\n            />\n            <input\n              class=\"Placehold\"\n              type=\"readonly\"\n              tabindex=\"-1\"\n              disabled=\"\"\n              placeholder=\"888888888888888888888\"\n            ></input>\n          </div>\n\n          <div className=\"LedResult\">\n            <input\n              className=\"Result\"\n              tabindex=\"-1\"\n              type=\"text\"\n              value={result}\n              onFocus={handleFocus}\n              readOnly\n            />\n            <input\n              class=\"Placehold\"\n              type=\"readonly\"\n              tabindex=\"-1\"\n              disabled=\"\"\n              placeholder=\"8888888888\"\n            ></input>\n          </div>\n        </div>\n        <img\n          src=\"https://altagram.com/wp-content/themes/betheme-child/img/Logo_Altagram.svg\"\n          alt=\"Logo\"\n          height=\"80px\"\n          style={{ opacity: \"0.4\" }}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}